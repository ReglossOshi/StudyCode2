/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-03-08 00:37:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import utils.DBConfig;
import java.sql.*;
import java.util.*;

public final class storeInsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("utils.DBConfig");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String info = request.getParameter("info");
	String itemnum = request.getParameter("itemnum");
	String type = request.getParameter("type");
	String date = request.getParameter("date");
	String itemcount = request.getParameter("itemcount");
	
	int num = Integer.parseInt(itemnum);
	int count = Integer.parseInt(itemcount);
	Connection conn = null; 
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	Exception exception = null;
	
	int searchcount=0;
	try{
		conn=DBConfig.getConnection();
		String sql="";
		
		
		if(type.equals("item")){
			if(info.equals("import")){
				sql = "SELECT SUM(IMPORT_QUANTITY) FROM IMPORT WHERE ITEM_NUM ="+num+" GROUP BY ITEM_NUM";
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				if(rs.next()){
					searchcount+=rs.getInt(1);
				}
				
				sql = "INSERT INTO IMPORT "+
								"VALUES (import_seq.nextval, "+num+", ?,"+count+", "+
										(searchcount+count)+", "+
										"(SELECT PRICE*0.5  FROM PRODUCTS p WHERE ITEM_NUM ="+num+"), "+
										"(SELECT PRICE*0.5*0.1 FROM PRODUCTS p WHERE ITEM_NUM ="+num+"),'입고')";
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, date);
				pstmt.executeUpdate();
			} else if(info.equals("export")){
				sql = "SELECT SUM(EXPORT_QUANTITY) FROM EXPORT WHERE ITEM_NUM = "+num+" GROUP BY ITEM_NUM";
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				if(rs.next()){
					searchcount+=rs.getInt(1);
				}
				
				sql = "INSERT INTO EXPORT VALUES(EXPORT_SEQ.NEXTVAL,"+num+",?,"+count+", "+
						(searchcount+count)+", "+ 
						"(SELECT PRICE FROM PRODUCTS p WHERE ITEM_NUM ="+num+"),'출고')";
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, date);
				pstmt.executeUpdate();
			}
		} else if(type.equals("order")){
			sql = "INSERT INTO sample VALUES("+num+",?,"+count+")";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, date);
			pstmt.executeUpdate();
		}
		
		int numArray[];
		int numArray2[];
		int update[];
		int arraySize=0;
		int index=0;
		sql = "SELECT ITEM_NUM FROM IMPORT i GROUP BY ITEM_NUM ORDER BY ITEM_NUM";
		pstmt = conn.prepareStatement(sql,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
		rs = pstmt.executeQuery();
		
		rs.last();
		arraySize=rs.getRow();
		rs.beforeFirst();
		numArray=new int[arraySize];
		numArray2=new int[arraySize];
		update = new int[arraySize];
		
		while(rs.next()){
			numArray[index]=rs.getInt(1);
			index++;
		}
		
		sql = "SELECT ITEM_NUM FROM ITEM_MANAGEMENT im GROUP BY ITEM_NUM ORDER BY ITEM_NUM";
		pstmt = conn.prepareStatement(sql);
		rs = pstmt.executeQuery();
		index=0;
		while(rs.next()){
			numArray2[index]=rs.getInt(1);
			index++;
		}
		
		
		
		for(int i=0;i<numArray.length;i++){
			for(int j=0;j<numArray2.length;j++){
				if(numArray[i]==numArray2[j]){
					update[i]=numArray[i];
					numArray[i]=0;
				}
			}
		}
		
		for(int i=0;i<numArray.length;i++){
			if(numArray[i]!=0){
				sql = "INSERT INTO ITEM_MANAGEMENT VALUES ("+numArray[i]+", (SELECT MAX(TOTAL_QUANTITY) FROM IMPORT i WHERE ITEM_NUM ="+numArray[i]+"),0,0)";
				pstmt = conn.prepareStatement(sql);
				pstmt.executeUpdate();
			}
		}
		
		for(int i=0;i<update.length;i++){
			sql = "UPDATE ITEM_MANAGEMENT  SET IMPORT_QUANTITY = (SELECT MAX(TOTAL_QUANTITY) FROM IMPORT i WHERE ITEM_NUM ="+update[i]+") WHERE ITEM_NUM ="+update[i];
			pstmt = conn.prepareStatement(sql);
			pstmt.executeUpdate();
		}
		
		
		
		sql = "SELECT ITEM_NUM FROM ITEM_MANAGEMENT im GROUP BY ITEM_NUM ORDER BY ITEM_NUM";
		pstmt = conn.prepareStatement(sql);
		rs = pstmt.executeQuery();
		index=0;
		while(rs.next()){
			numArray2[index]=rs.getInt(1);
			index++;
		}
		
		for(int i=0;i<numArray2.length;i++){
			sql = "SELECT MAX(TOTAL_QUANTITY)  FROM EXPORT e WHERE ITEM_NUM ="+numArray2[i];
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			String totalQuantity = "";
			if(rs.next()){
				totalQuantity=rs.getString(1);
			}
			if(totalQuantity==null){
				totalQuantity="0";
			}
			
			sql = "UPDATE ITEM_MANAGEMENT SET "+
					"EXPORT_QUANTITY = "+Integer.parseInt(totalQuantity)+" WHERE ITEM_NUM ="+numArray2[i];
			pstmt = conn.prepareStatement(sql);
			pstmt.executeUpdate();
		}
		
		for(int i=0;i<numArray2.length;i++){
			sql = "UPDATE ITEM_MANAGEMENT SET "+
					"QUANTITY = IMPORT_QUANTITY-EXPORT_QUANTITY WHERE ITEM_NUM ="+numArray2[i];
			pstmt = conn.prepareStatement(sql);
			pstmt.executeUpdate();
		}
		
	}catch(Exception e){
		exception=e;
		System.out.println("에러 로그:"+e.getMessage());
	} finally{
		if(pstmt !=null){try{pstmt.close();}catch(SQLException e){}}
		if(conn !=null){try{conn.close();}catch(SQLException e){}}
	}

      out.write("\r\n");
      out.write("\r\n");

	if(exception==null){
		
      out.write("\r\n");
      out.write("		<script>\r\n");
      out.write("		alert('재고 등록 완료.');\r\n");
      out.write("		location.href='");
      out.print(request.getContextPath());
      out.write("/store.jsp';\r\n");
      out.write("		</script>\r\n");
      out.write("		");
	
	} else{
		
      out.write("\r\n");
      out.write("		공지사항 등록이 실패하였습니다. 시스템 관리자에게 문의하세요.<BR>\r\n");
      out.write("		오류내용:");
      out.print(exception.getMessage() );
      out.write("\r\n");
      out.write("		");

	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
