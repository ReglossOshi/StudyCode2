/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-02-02 05:30:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import utils.DBConfig;
import java.sql.*;
import java.util.*;

public final class adminNotice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("utils.DBConfig");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/style.css\">\r\n");
      out.write("    <script type=\"text/javascript\" src=\"./js/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("    <title>스타벅스 어드민 공지사항</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- 1. 게시판의 화면은 class=\"card\"로 적용 -->\r\n");
      out.write("    <div class=\"card\">\r\n");
      out.write("\r\n");
      out.write("        <!-- 1-1. 게시판 이름은 class=\"card-header\"로  <div>로 구역 설정 -->\r\n");
      out.write("        <div class=\"card-header\"><a href=\"#\"><h1>스타벅스 어드민 공지사항</h1></a></div>\r\n");
      out.write("\r\n");
      out.write("        <!-- 1-2. 내용은 class=\"card-body\"로 <div>로 구역 설정 -->\r\n");
      out.write("        <div class=\"card-body\">\r\n");
      out.write("	");

	//request, session, application =>웹 서버 생명 주기 scope
	session.setAttribute("name", "홍길동");
	//application.setAttribute("name-id", "홍길동");
	//session.getAttribute(arg0, arg1);
	
	String search=request.getParameter("search");
	//1.JSDB로 Oracle연결 ->java - DBConfig.java
	Connection conn = null; //디비 접속 성공시 접속 정보 저장
	PreparedStatement pstmt = null; //쿼리를 실행하기 객체 정보
	ResultSet rs = null;
	if(search==null){
		search="";
	}
	
      out.write("\r\n");
      out.write("            <!-- 검색어 입력하기 -->\r\n");
      out.write("            <input type=\"search\" name=\"search-text\" id=\"search-text\" placeholder=\"검색어를 입력하세요.\" value=\"");
      out.print(search);
      out.write("\"><a class=\"search\" href=\"javascript: searchText();\">검색</a>\r\n");
      out.write("            \r\n");
      out.write("            <!-- 내용을 HTML로 작성하기 -->\r\n");
      out.write("    ");
 
		String currentPage=request.getParameter("pagenum");
		
		if(currentPage==null){
			currentPage="1";
		}
	
		int totalCount=0;
		int pageCount=5;
		int limit=5;
		int totalPage=0;
		int pageGroup=0;
		int firstNumber=0;
		int lastNumber=0;
		int row = 0;
		int count=0;
		int next=0;
		int prev=0;
		
		try{
			conn=DBConfig.getConnection();
			String sql = "SELECT count(*) FROM BO_FREE";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()){
				totalCount+=rs.getInt(1);

			}
			
			totalPage = (int)(totalCount/limit);

			
			if(totalCount%limit>0){
				totalPage+=1;
			}

			
			if(totalPage<Integer.parseInt(currentPage)){
				currentPage=Integer.toString(totalPage);
			}
			
			pageGroup=Integer.valueOf(currentPage)/pageCount;

			if(pageGroup==0){
				pageGroup++;
			}

			
			lastNumber = pageGroup*pageCount;

			if(lastNumber>totalPage){
				lastNumber=totalPage;
			}

			firstNumber = lastNumber-(pageCount-1);
			
			next = lastNumber+1;
			prev = firstNumber-1;
			
			if(firstNumber<=0){
				firstNumber=1;
				prev=1;
			}
			
			count=Integer.parseInt(currentPage)-1;
			
			row=limit*count;
			
		}catch(SQLException e){
			System.out.println("에러 로그:"+e.getMessage());
		}
	
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            ");

					try{
						conn=DBConfig.getConnection();
						
						//2. BO_FREE 테이블에서 SQL로 데이터 가져오기
						String sql = "SELECT num, subject, TO_CHAR(regdate,'YYYY-MM-DD'),hit FROM BO_FREE WHERE subject LIKE '%"+search+"%' order by num OFFSET "+row+" ROWS FETCH NEXT "+limit+" ROW ONLY";
						pstmt = conn.prepareStatement(sql);

						
						//3. rs로 데이터 가져온 걸 웹에 보여주기 => 쿼리 실행 결과 출력
						rs = pstmt.executeQuery();
						
						//rs.last();
						//int i=rs.getRow();
						//rs.beforeFirst();

						while(rs.next()){
						
							
      out.write("\r\n");
      out.write("								<div class=\"content-box\">\r\n");
      out.write("					                <div class=\"check\"><input type=\"checkbox\" name=\"\" id=\"\"></div>\r\n");
      out.write("					                <div class=\"title\"><a href=\"adminNoticeUpdateForm.jsp?num=");
      out.print(rs.getInt(1));
      out.write('"');
      out.write('>');
      out.print(rs.getString(2) );
      out.write("</a></div>\r\n");
      out.write("					                <div class=\"delete\">\r\n");
      out.write("					                	<button onclick=\"textdelete(");
      out.print(rs.getInt(1));
      out.write(")\">X</button>\r\n");
      out.write("					                </div>\r\n");
      out.write("           						</div>\r\n");
      out.write("							");
 
						}
						
					}catch(SQLException e){
						System.out.println("에러 로그:"+e.getMessage());
					}
        		
      out.write("\r\n");
      out.write("	\r\n");
      out.write("            <ul class=\"number\">\r\n");
      out.write("                <li><a href=\"adminNotice.jsp?pagenum=");
      out.print(prev);
      out.write("\">&lt;</a></li>\r\n");
      out.write("                ");

                	for(int i=firstNumber;i<=lastNumber;i++){
                		if (i == Integer.parseInt(currentPage)) { 
                		
      out.write("\r\n");
      out.write("                			<li>\r\n");
      out.write("                				<a href=\"adminNotice.jsp?pagenum=");
      out.print(i);
      out.write("\" style=\"background-color: rgb(252, 212, 205);\">");
      out.print(i);
      out.write("</a>\r\n");
      out.write("                				");
System.out.println("등록"); 
      out.write("\r\n");
      out.write("                			</li>\r\n");
      out.write("                		");

                		} else{
                			
      out.write("\r\n");
      out.write("                				<li>\r\n");
      out.write("                					<a href=\"adminNotice.jsp?pagenum=");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("</a>\r\n");
      out.write("                				</li>\r\n");
      out.write("                			");

                		}
                	}
                
      out.write("\r\n");
      out.write("                <li><a href=\"adminNotice.jsp?pagenum=");
      out.print(next);
      out.write("\">&gt;</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- 1-3. 글쓰기 버튼은 class=\"btn\"로 <div>로 구역 설정 -->\r\n");
      out.write("        <div class=\"btn\">\r\n");
      out.write("            <a href=\"adminNoticeInsertForm.jsp\">글쓰기</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    \r\n");
      out.write("    	function searchText() {\r\n");
      out.write("			location.href=\"adminNotice.jsp?search=\"+$('#search-text').val();\r\n");
      out.write("		}\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("    	function textdelete(num) {\r\n");
      out.write("    		var a = confirm(\"선택한 글을 정말 삭제하시겠습니까?\");\r\n");
      out.write("    		if(a==true){\r\n");
      out.write("    			location.href=\"adminNoticeDelete.jsp?num=\"+num;\r\n");
      out.write("    		}\r\n");
      out.write("		}\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
